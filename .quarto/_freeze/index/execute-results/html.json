{
  "hash": "2a8d6be986232f35b731efffeed572b3",
  "result": {
    "markdown": "---\ntitle: \"genCounter\"\n---\n\n\nIf you are wanting to use the [Gendered Language Dictionary developed by Roberts and Utych (2019)](https://journals.sagepub.com/doi/10.1177/1065912919874883), there are two main ways that you can do so:\n\n- R Package\n- Webapp (Archived)\n\nBoth of these are built as side projects as I have time and I can not guarantee perfect accuracy with either of these tools. So, be sure to use them at your own risk. The R Package interface is much more transparent with the results for the tool, so that one is recommended more highly than the Webapp.\n\n# Using the R Package\n\n## Installation\n\nThe package is currently under review with `CRAN`. However, you are welcome to download the most recent version of the package from `Github`:\n\n```{{r}}\ndevtools::install_github(\"DamonCharlesRoberts/genCountR\")\n```\n\nOr if you are using `RENV`\n\n```{{r}}\nrenv::install(\"DamonCharlesRoberts/genCountR\")\n```\n\n## Count number of matches to dictionary with their score and label\n\nTo count the number of occurrences in your document that also appear in the dictionary, you can use the `genCountR::gen_count()` function. It will not only count the number of words that match those in the dictionary, but it will also return the score and whether the word was classified according to [Roberts and Utych (2019)](https://journals.sagepub.com/doi/10.1177/1065912919874883)^[Words that have a score below 2.5 are Feminine, words with a score between 2.5 and 5.5 are Neutral, and words with a score above 5.5 are Masculine.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the package\nlibrary(genCountR)\n\n# Pass a string to be analyzed\nstr <- \"This person was a hero. They were a prisoner of war and I, as President, got them out.\"\n\n# Use the gen_count() function on the str\ngen_count(str)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      word count    score classified\n1     hero     1 5.615385  Masculine\n2 prisoner     1 5.272727    Neutral\n```\n:::\n:::\n\n\n## Return the overall score of the passed string\n\nTo find an overall score of the \"genderedness\" of some text, you can use the `genCountR::gen_score()` function. This function takes the count of words that match with those in the dictionary, sum up the scores of all of those matched occurrences and then calculates the average \"document\" score by dividing by the number of words passed in the string (\"document\").\n\nIt also returns more information than the average score. It will return a `list` object including the average score (`avg_score`), but also the total score `total_score` for the document before normalized based on the length of text, but also the `data.frame` (`df`) that reports which words were matched, how often they occurred, the score, and the total score provided by each word.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the package\nlibrary(genCountR)\n\n# Pass a string to be analyzed\nstr <- \"This person was a hero. They were a prisoner of war and I, as President, got them out.\"\n\n# Use the gen_count() function on the str\ngen_score(str)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$avg_score\n[1] 0.6048951\n\n$total_score\n[1] 10.88811\n\n$df\n      word count   mean.a total_score\n1     hero     1 5.615385    5.615385\n2 prisoner     1 5.272727    5.272727\n```\n:::\n:::\n\n\n# Using the Webapp\n\n::: {.callout-warning style=\"minimal\"}\n#### Note\n\nThe webapp has been archived. I was paying monthly to host it and the costs were not justified too well. Please use the R package from now on. Sorry for any inconvenience!\n:::\n\n1. Go to: [https://gencounter.app.damoncroberts.com](https://gencounter.app.damoncroberts.com)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}